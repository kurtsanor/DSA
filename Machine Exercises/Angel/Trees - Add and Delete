public class TreeAddDelete {
    public static TreeNode delete(TreeNode root, int value) {
        if (root == null) return null;

        // Find the node to delete
        if (value < root.data) {
            root.left = delete(root.left, value);
        } else if (value > root.data) {
            root.right = delete(root.right, value);
        } else {
            // Case 1: Node with only one child or no child
            if (root.left == null) return root.right;
            if (root.right == null) return root.left;

            // Case 2: Node with two children
            root.data = findMin(root.right); // Replace with the smallest value in the right subtree
            root.right = delete(root.right, root.data); // Delete the duplicate
        }
        return root;
    }

    public static int findMin(TreeNode root) {
        while (root.left != null) {
            root = root.left;
        }
        return root.data;
    }

    public static void main(String[] args) {
        TreeNode root = null;
        root = TreeSort.insert(root, 50);
        root = TreeSort.insert(root, 30);
        root = TreeSort.insert(root, 70);
        root = TreeSort.insert(root, 20);
        root = TreeSort.insert(root, 40);

        // Delete a node from the tree
        root = delete(root, 30);

        // Output the tree after deletion
        System.out.print("Tree after deletion (In-order Traversal): ");
        TreeSort.inorderTraversal(root);
    }
}
